<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Obsidian.API</name>
    </assembly>
    <members>
        <member name="M:Obsidian.CommandFramework.Entities.Command.GetQualifiedName">
            <summary>
            Gets the full qualified command name.
            </summary>
            <returns>Full qualified command name.</returns>
        </member>
        <member name="M:Obsidian.CommandFramework.Entities.Command.ExecuteAsync(Obsidian.CommandFramework.ObsidianContext,System.String[])">
            <summary>
            Executes this command.
            </summary>
            <typeparam name="T">Context type.</typeparam>
            <param name="Context">Execution context.</param>
            <returns></returns>
        </member>
        <member name="T:Obsidian.API.Events.AsyncEventHandler">
            <summary>
            Represents an asynchronous event handler.
            </summary>
            <returns>Event handling task.</returns>
        </member>
        <member name="T:Obsidian.API.Events.AsyncEventHandler`1">
            <summary>
            Represents an asynchronous event handler.
            </summary>
            <typeparam name="T">Type of EventArgs for the event.</typeparam>
            <returns>Event handling task.</returns>
        </member>
        <member name="T:Obsidian.API.Events.AsyncEventArgs">
            <summary>
            Represents asynchronous event arguments.
            </summary>
        </member>
        <member name="P:Obsidian.API.Events.AsyncEventArgs.Handled">
            <summary>
            Gets or sets whether the event was completely handled. Setting this to true will prevent remaining handlers from running.
            </summary>
        </member>
        <member name="T:Obsidian.API.Events.AsyncEvent">
            <summary>
            Represents an asynchronously-handled event.
            </summary>
        </member>
        <member name="T:Obsidian.API.Events.AsyncEvent`1">
            <summary>
            Represents an asynchronously-handled event.
            </summary>
            <typeparam name="T">Type of EventArgs for this event.</typeparam>
        </member>
        <member name="P:Obsidian.API.Events.BaseMinecraftEventArgs.Server">
            <summary>
            Server this event took place in.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Obsidian.API.Events.BaseMinecraftEventArgs.#ctor(Obsidian.API.IServer)" -->
        <member name="P:Obsidian.API.Events.IncomingChatMessageEventArgs.Message">
            <summary>
            The message that was sent.
            </summary>
        </member>
        <member name="P:Obsidian.API.Events.InventoryClickEventArgs.Inventory">
            <summary>
            Gets the clicked inventory
            </summary>
        </member>
        <member name="P:Obsidian.API.Events.InventoryClickEventArgs.Item">
            <summary>
            Gets the current item that was clicked
            </summary>
        </member>
        <member name="P:Obsidian.API.Events.InventoryClickEventArgs.Slot">
            <summary>
            Gets the slot that was clicked
            </summary>
        </member>
        <member name="P:Obsidian.API.Events.PlayerEventArgs.Player">
            <summary>
            The player involved in this event
            </summary>
        </member>
        <member name="P:Obsidian.API.Events.PlayerJoinEventArgs.JoinDate">
            <summary>
            The date the player joined.
            </summary>
        </member>
        <member name="T:Obsidian.API.Plugins.AliasAttribute">
            <summary>
            Specifies the property/field name that is used for dependency injection.
            </summary>
        </member>
        <member name="P:Obsidian.API.Plugins.AliasAttribute.Identifier">
            <summary>
            Name that is used for dependency injection.
            </summary>
        </member>
        <member name="M:Obsidian.API.Plugins.AliasAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Obsidian.API.Plugins.AliasAttribute"/> with the specified identifier.
            </summary>
            <param name="identifier">Name that is used for dependency injection.</param>
        </member>
        <member name="T:Obsidian.API.Plugins.DependencyAttribute">
            <summary>
            Indicates that the field/property should have it's value injected with a plugin.
            </summary>
        </member>
        <member name="P:Obsidian.API.Plugins.DependencyAttribute.Optional">
            <summary>
            Indicates whether the plugin can run without this dependency.
            </summary>
        </member>
        <member name="P:Obsidian.API.Plugins.DependencyAttribute.MinVersion">
            <summary>
            Minimal version of the dependency that can be used. The string should contain the major, minor, <i>[build]</i>, and <i>[revision]</i> numbers, split by a period character ('.').
            </summary>
        </member>
        <member name="M:Obsidian.API.Plugins.DependencyAttribute.GetMinVersion">
            <summary>
            Gets <see cref="P:Obsidian.API.Plugins.DependencyAttribute.MinVersion"/> parsed to <see cref="T:System.Version"/> if possible, otherwise returns <c>new Version()</c>.
            </summary>
            <returns><see cref="P:Obsidian.API.Plugins.DependencyAttribute.MinVersion"/> parsed to <see cref="T:System.Version"/> if possible, otherwise returns <c>new Version()</c>.</returns>
        </member>
        <member name="T:Obsidian.API.Plugins.InjectAttribute">
            <summary>
            Indicates that the property should be injected with a service.
            </summary>
        </member>
        <member name="T:Obsidian.API.Plugins.PluginAttribute">
            <summary>
            Provides information about the plugin.
            </summary>
        </member>
        <member name="P:Obsidian.API.Plugins.PluginAttribute.Name">
            <summary>
            Name of the plugin.
            </summary>
        </member>
        <member name="P:Obsidian.API.Plugins.PluginAttribute.Version">
            <summary>
            Version of the plugin. The string should contain the major, minor, <i>[build]</i>, and <i>[revision]</i> numbers, split by a period character ('.').
            </summary>
        </member>
        <member name="P:Obsidian.API.Plugins.PluginAttribute.Authors">
            <summary>
            Name(s) of the plugin's author(s).
            </summary>
        </member>
        <member name="P:Obsidian.API.Plugins.PluginAttribute.Description">
            <summary>
            Description of the plugin.
            </summary>
        </member>
        <member name="P:Obsidian.API.Plugins.PluginAttribute.ProjectUrl">
            <summary>
            URL address of where the plugin is hosted.
            </summary>
        </member>
        <member name="T:Obsidian.API.Plugins.PluginBase">
            <summary>
            Provides the base class for a plugin.
            </summary>
        </member>
        <member name="M:Obsidian.API.Plugins.PluginBase.Invoke(System.String,System.Object[])">
            <summary>
            Invokes a method in the class. For repeated calls use <see cref="M:Obsidian.API.Plugins.PluginBase.GetMethod``1(System.String,System.Type[])">GetMethod</see> or make a plugin wrapper.
            </summary>
        </member>
        <member name="M:Obsidian.API.Plugins.PluginBase.FriendlyInvokeAsync(System.String,System.Object[])">
            <summary>
            Invokes a method in the class. The actual method can accept less parameters than <c>args</c>.
            If exception occurs, it is returned inside <see cref="T:System.AggregateException"/>.
            This method can be used on non-async methods too.
            </summary>
        </member>
        <member name="M:Obsidian.API.Plugins.PluginBase.InvokeAsync(System.String,System.Object[])">
            <summary>
            Invokes a method in the class. For repeated calls use <see cref="M:Obsidian.API.Plugins.PluginBase.GetMethod``1(System.String,System.Type[])">GetMethod</see> or make a plugin wrapper.
            This method can be used on non-async methods too.
            </summary>
        </member>
        <member name="M:Obsidian.API.Plugins.PluginBase.Invoke``1(System.String,System.Object[])">
            <summary>
            Invokes a method in the class. For repeated calls use <see cref="M:Obsidian.API.Plugins.PluginBase.GetMethod``1(System.String,System.Type[])">GetMethod</see> or make a plugin wrapper.
            </summary>
        </member>
        <member name="M:Obsidian.API.Plugins.PluginBase.InvokeAsync``1(System.String,System.Object[])">
            <summary>
            Invokes a method in the class. For repeated calls use <see cref="M:Obsidian.API.Plugins.PluginBase.GetMethod``1(System.String,System.Type[])">GetMethod</see> or make a plugin wrapper.
            This method can be used on non-async methods too.
            </summary>
        </member>
        <member name="M:Obsidian.API.Plugins.PluginBase.GetMethod``1(System.String,System.Type[])">
            <summary>
            Returns a delegate for this plugin's method.
            </summary>
        </member>
        <member name="M:Obsidian.API.Plugins.PluginBase.GetPropertyGetter``1(System.String)">
            <summary>
            Returns a delegate for this plugin's property getter.
            </summary>
        </member>
        <member name="M:Obsidian.API.Plugins.PluginBase.GetPropertySetter``1(System.String)">
            <summary>
            Returns a delegate for this plugin's property setter.
            </summary>
        </member>
        <member name="M:Obsidian.API.Plugins.PluginBase.Unload">
            <summary>
            Causes this plugin to be unloaded.
            </summary>
        </member>
        <member name="T:Obsidian.API.Plugins.PluginPermissions">
            <summary>
            Represents permissions for performing specific types of actions.
            </summary>
        </member>
        <member name="F:Obsidian.API.Plugins.PluginPermissions.CanWrite">
            <summary>
            Allows writing to files.
            </summary>
        </member>
        <member name="F:Obsidian.API.Plugins.PluginPermissions.CanRead">
            <summary>
            Allows reading from files.
            </summary>
        </member>
        <member name="F:Obsidian.API.Plugins.PluginPermissions.FileAccess">
            <summary>
            Allows working with files.
            </summary>
        </member>
        <member name="F:Obsidian.API.Plugins.PluginPermissions.NetworkAccess">
            <summary>
            Allows doing actions over network.
            </summary>
        </member>
        <member name="F:Obsidian.API.Plugins.PluginPermissions.Interop">
            <summary>
            Allows using native libraries.
            </summary>
        </member>
        <member name="F:Obsidian.API.Plugins.PluginPermissions.Reflection">
            <summary>
            Allows performing reflection.
            </summary>
        </member>
        <member name="F:Obsidian.API.Plugins.PluginPermissions.RunningSubprocesses">
            <summary>
            Allows using System.Diagnostics and System.Runtime.Loader libraries.
            </summary>
        </member>
        <member name="F:Obsidian.API.Plugins.PluginPermissions.Compilation">
            <summary>
            Allows using Microsoft.CodeAnalysis and related libraries.
            </summary>
        </member>
        <member name="F:Obsidian.API.Plugins.PluginPermissions.ThirdPartyLibraries">
            <summary>
            Allows using 3rd party libraries.
            </summary>
        </member>
        <member name="T:Obsidian.API.Plugins.PluginWrapper">
            <summary>
            Provides the base class for a plugin wrapper.
            </summary>
        </member>
        <member name="M:Obsidian.API.Plugins.PluginWrapper.Invoke(System.String,System.Object[])">
            <summary>
            Invokes a method in the class. For repeated calls use <see cref="M:Obsidian.API.Plugins.PluginWrapper.GetMethod``1(System.String,System.Type[])">GetMethod</see> or make a plugin wrapper.
            </summary>
        </member>
        <member name="M:Obsidian.API.Plugins.PluginWrapper.Invoke``1(System.String,System.Object[])">
            <summary>
            Invokes a method in the class. For repeated calls use <see cref="M:Obsidian.API.Plugins.PluginWrapper.GetMethod``1(System.String,System.Type[])">GetMethod</see> or make a plugin wrapper.
            </summary>
        </member>
        <member name="M:Obsidian.API.Plugins.PluginWrapper.GetMethod``1(System.String,System.Type[])">
            <summary>
            Returns a delegate for this plugin's method.
            </summary>
        </member>
        <member name="M:Obsidian.API.Plugins.PluginWrapper.GetPropertyGetter``1(System.String)">
            <summary>
            Returns a delegate for this plugin's property getter.
            </summary>
        </member>
        <member name="M:Obsidian.API.Plugins.PluginWrapper.GetPropertySetter``1(System.String)">
            <summary>
            Returns a delegate for this plugin's property setter.
            </summary>
        </member>
        <member name="T:Obsidian.API.Plugins.Services.Common.ISecuredService">
            <summary>
            Provides the base interface for services that need permission to be used.
            </summary>
        </member>
        <member name="P:Obsidian.API.Plugins.Services.Common.ISecuredService.IsUsable">
            <summary>
            Gets a value indicating whether the <see cref="T:Obsidian.API.Plugins.Services.Common.ISecuredService"/> has a permission to be used.
            </summary>
        </member>
        <member name="T:Obsidian.API.Plugins.Services.Common.IService">
            <summary>
            Provides the base interface for services.
            </summary>
        </member>
        <member name="P:Obsidian.API.Plugins.Services.Diagnostics.IProcess.Name">
            <summary>
            Gets the name of the process.
            </summary>
        </member>
        <member name="P:Obsidian.API.Plugins.Services.Diagnostics.IProcess.Id">
            <summary>
            Gets the unique identifier for the associated process.
            </summary>
        </member>
        <member name="P:Obsidian.API.Plugins.Services.Diagnostics.IProcess.StartTime">
            <summary>
            Gets the time that the associated process was started.
            </summary>
        </member>
        <member name="P:Obsidian.API.Plugins.Services.Diagnostics.IProcess.ExitTime">
            <summary>
            Gets the time that the associated process exited.
            </summary>
        </member>
        <member name="P:Obsidian.API.Plugins.Services.Diagnostics.IProcess.ThreadCount">
            <summary>
            Gets the number of threads that are running in the associated process.
            </summary>
        </member>
        <member name="P:Obsidian.API.Plugins.Services.Diagnostics.IProcess.VirtualMemorySize">
            <summary>
            Gets the amount of the virtual memory, in bytes, allocated for the associated process.
            </summary>
        </member>
        <member name="P:Obsidian.API.Plugins.Services.Diagnostics.IProcess.PeakVirtualMemorySize">
            <summary>
            Gets the maximum amount of virtual memory, in bytes, used by the associated process.
            </summary>
        </member>
        <member name="P:Obsidian.API.Plugins.Services.Diagnostics.IProcess.PagedMemorySize">
            <summary>
            Gets the amount of paged memory, in bytes, allocated for the associated process.
            </summary>
        </member>
        <member name="P:Obsidian.API.Plugins.Services.Diagnostics.IProcess.NonpagedSystemMemorySize">
            <summary>
            Gets the amount of nonpaged system memory, in bytes, allocated for the associated process.
            </summary>
        </member>
        <member name="P:Obsidian.API.Plugins.Services.Diagnostics.IProcess.PagedSystemMemorySize">
            <summary>
            Gets the amount of pageable system memory, in bytes, allocated for the associated process.
            </summary>
        </member>
        <member name="P:Obsidian.API.Plugins.Services.Diagnostics.IProcess.PeakPagedMemorySize">
            <summary>
            Gets the maximum amount of memory in the virtual memory paging file, in bytes, used by the associated process.
            </summary>
        </member>
        <member name="P:Obsidian.API.Plugins.Services.Diagnostics.IProcess.PrivateMemorySize">
            <summary>
            Gets the amount of private memory, in bytes, allocated for the associated process.
            </summary>
        </member>
        <member name="P:Obsidian.API.Plugins.Services.Diagnostics.IProcess.WorkingSet">
            <summary>
            Gets the amount of physical memory, in bytes, allocated for the associated process.
            </summary>
        </member>
        <member name="P:Obsidian.API.Plugins.Services.Diagnostics.IProcess.PeakWorkingSet">
            <summary>
            Gets the maximum amount of physical memory, in bytes, used by the associated process.
            </summary>
        </member>
        <member name="M:Obsidian.API.Plugins.Services.Diagnostics.IProcess.Close">
            <summary>
            Frees all the resources that are associated with this component.
            </summary>
            <exception cref="T:System.Security.SecurityException"></exception>
        </member>
        <member name="M:Obsidian.API.Plugins.Services.Diagnostics.IProcess.Kill">
            <summary>
            Immediately stops the associated process.
            </summary>
            <exception cref="T:System.Security.SecurityException"></exception>
        </member>
        <member name="P:Obsidian.API.Plugins.Services.Diagnostics.IStopwatch.Elapsed">
            <summary>
            Gets the total elapsed time measured by the current instance.
            </summary>
        </member>
        <member name="P:Obsidian.API.Plugins.Services.Diagnostics.IStopwatch.ElapsedMilliseconds">
            <summary>
            Gets the total elapsed time measured by the current instance, in milliseconds.
            </summary>
        </member>
        <member name="P:Obsidian.API.Plugins.Services.Diagnostics.IStopwatch.ElapsedTicks">
            <summary>
            Gets the total elapsed time measured by the current instance, in timer ticks.
            </summary>
        </member>
        <member name="P:Obsidian.API.Plugins.Services.Diagnostics.IStopwatch.IsRunning">
            <summary>
            Gets a value indicating whether the <see cref="T:Obsidian.API.Plugins.Services.Diagnostics.IStopwatch"/> timer is running.
            </summary>
        </member>
        <member name="M:Obsidian.API.Plugins.Services.Diagnostics.IStopwatch.Start">
            <summary>
            Starts, or resumes, measuring elapsed time for an interval.
            </summary>
        </member>
        <member name="M:Obsidian.API.Plugins.Services.Diagnostics.IStopwatch.Stop">
            <summary>
            Stops measuring elapsed time for an interval.
            </summary>
        </member>
        <member name="M:Obsidian.API.Plugins.Services.Diagnostics.IStopwatch.Reset">
            <summary>
            Stops time interval measurement and resets the elapsed time to zero.
            </summary>
        </member>
        <member name="M:Obsidian.API.Plugins.Services.Diagnostics.IStopwatch.Restart">
            <summary>
            Stops time interval measurement, resets the elapsed time to zero, and starts measuring elapsed time.
            </summary>
        </member>
        <member name="T:Obsidian.API.Plugins.Services.IDiagnoser">
            <summary>
            Represents a service used for process diagnoses.
            </summary>
        </member>
        <member name="M:Obsidian.API.Plugins.Services.IDiagnoser.GetProcess">
            <summary>
            Gets a new <see cref="T:Obsidian.API.Plugins.Services.Diagnostics.IProcess"/> component and associates it with the currently active process.
            </summary>
            <returns>A new <see cref="T:Obsidian.API.Plugins.Services.Diagnostics.IProcess"/> component associated with the process resource that is running the calling application.</returns>
            <exception cref="T:System.Security.SecurityException"></exception>
        </member>
        <member name="M:Obsidian.API.Plugins.Services.IDiagnoser.GetProcesses">
            <summary>
            Creates a new <see cref="T:Obsidian.API.Plugins.Services.Diagnostics.IProcess"/> component for each process resource on the local computer.
            </summary>
            <returns>An array of type <see cref="T:Obsidian.API.Plugins.Services.Diagnostics.IProcess"/> that represents all the process resources running on the local computer.</returns>
            <exception cref="T:System.Security.SecurityException"></exception>
        </member>
        <member name="M:Obsidian.API.Plugins.Services.IDiagnoser.StartProcess(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Starts a process resource by specifying the name of an application and a set of command-line arguments, and associates the resource with a new <see cref="T:Obsidian.API.Plugins.Services.Diagnostics.IProcess"/> component.
            </summary>
            <param name="fileName">The application or document to start.</param>
            <param name="arguments">The set of command-line arguments to use when starting the application.</param>
            <param name="createWindow">Indicates whether to start the process in a new window.</param>
            <param name="useShell">Indicates whether to use the operating system shell to start the process.</param>
            <returns>A new <see cref="T:Obsidian.API.Plugins.Services.Diagnostics.IProcess"/> that is associated with the process resource, or null if no process resource is started. </returns>
        </member>
        <member name="M:Obsidian.API.Plugins.Services.IDiagnoser.GetStopwatch">
            <summary>
            Returns a new instance of <see cref="T:Obsidian.API.Plugins.Services.Diagnostics.IStopwatch"/>.
            </summary>
        </member>
        <member name="M:Obsidian.API.Plugins.Services.IDiagnoser.StartStopwatch">
            <summary>
            Returns a new instance of <see cref="T:Obsidian.API.Plugins.Services.Diagnostics.IStopwatch"/> and starts it.
            </summary>
        </member>
        <member name="T:Obsidian.API.Plugins.Services.IFileReader">
            <summary>
            Represents a service used for reading from files.s
            </summary>
        </member>
        <member name="M:Obsidian.API.Plugins.Services.IFileReader.OpenRead(System.String)">
            <summary>
            Opens an existing file for reading.
            </summary>
            <exception cref="T:System.Security.SecurityException"></exception>
        </member>
        <member name="M:Obsidian.API.Plugins.Services.IFileReader.ReadAllBytes(System.String)">
            <summary>
            Opens a binary file, reads the contents of the file into a byte array, and then closes the file.
            </summary>
            <exception cref="T:System.Security.SecurityException"></exception>
        </member>
        <member name="M:Obsidian.API.Plugins.Services.IFileReader.ReadAllBytesAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously opens a binary file, reads the contents of the file into a byte array, and then closes the file.
            </summary>
            <exception cref="T:System.Security.SecurityException"></exception>
        </member>
        <member name="M:Obsidian.API.Plugins.Services.IFileReader.ReadAllLines(System.String)">
            <summary>
            Opens a text file, reads all lines of the file, and then closes the file.
            </summary>
            <exception cref="T:System.Security.SecurityException"></exception>
        </member>
        <member name="M:Obsidian.API.Plugins.Services.IFileReader.ReadAllLinesAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously opens a text file, reads all lines of the file, and then closes the file.
            </summary>
            <exception cref="T:System.Security.SecurityException"></exception>
        </member>
        <member name="M:Obsidian.API.Plugins.Services.IFileReader.ReadAllText(System.String)">
            <summary>
            Opens a text file, reads all the text in the file, and then closes the file.
            </summary>
            <exception cref="T:System.Security.SecurityException"></exception>
        </member>
        <member name="M:Obsidian.API.Plugins.Services.IFileReader.ReadAllTextAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously opens a text file, reads all the text in the file, and then closes the file.
            </summary>
            <exception cref="T:System.Security.SecurityException"></exception>
        </member>
        <member name="M:Obsidian.API.Plugins.Services.IFileReader.GetDirectoryFiles(System.String)">
            <summary>
            Returns the names of files (including their paths) in the specified directory.
            </summary>
            <exception cref="T:System.Security.SecurityException"></exception>
        </member>
        <member name="M:Obsidian.API.Plugins.Services.IFileReader.GetSubdirectories(System.String)">
            <summary>
            Returns the names of subdirectories (including their paths) in the specified directory.
            </summary>
            <exception cref="T:System.Security.SecurityException"></exception>
        </member>
        <member name="T:Obsidian.API.Plugins.Services.IFileWriter">
            <summary>
            Represents a service used for creating and writing to files.
            </summary>
        </member>
        <member name="M:Obsidian.API.Plugins.Services.IFileWriter.OpenWrite(System.String)">
            <summary>
            Opens an existing file or creates a new file for writing.
            </summary>
            <exception cref="T:System.Security.SecurityException"></exception>
        </member>
        <member name="M:Obsidian.API.Plugins.Services.IFileWriter.WriteAllBytes(System.String,System.Byte[])">
            <summary>
            Creates a new file, writes the specified byte array to the file, and then closes the file. If the target file already exists, it is overwritten.
            </summary>
            <exception cref="T:System.Security.SecurityException"></exception>
        </member>
        <member name="M:Obsidian.API.Plugins.Services.IFileWriter.WriteAllBytesAsync(System.String,System.Byte[],System.Threading.CancellationToken)">
            <summary>
            Asynchronously creates a new file, writes the specified byte array to the file, and then closes the file. If the target file already exists, it is overwritten.
            </summary>
            <exception cref="T:System.Security.SecurityException"></exception>
        </member>
        <member name="M:Obsidian.API.Plugins.Services.IFileWriter.WriteAllLines(System.String,System.String[])">
            <summary>
            Creates a new file, write the specified string array to the file, and then closes the file.
            </summary>
            <exception cref="T:System.Security.SecurityException"></exception>
        </member>
        <member name="M:Obsidian.API.Plugins.Services.IFileWriter.WriteAllLinesAsync(System.String,System.String[],System.Threading.CancellationToken)">
            <summary>
            Creates a new file, writes the specified string array to the file by using the specified encoding, and then closes the file.
            </summary>
            <exception cref="T:System.Security.SecurityException"></exception>
        </member>
        <member name="M:Obsidian.API.Plugins.Services.IFileWriter.WriteAllText(System.String,System.String)">
            <summary>
            Creates a new file, writes the specified string to the file, and then closes the file. If the target file already exists, it is overwritten.
            </summary>
            <exception cref="T:System.Security.SecurityException"></exception>
        </member>
        <member name="M:Obsidian.API.Plugins.Services.IFileWriter.WriteAllTextAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously creates a new file, writes the specified string to the file, and then closes the file. If the target file already exists, it is overwritten.
            </summary>
            <exception cref="T:System.Security.SecurityException"></exception>
        </member>
        <member name="M:Obsidian.API.Plugins.Services.IFileWriter.AppendText(System.String,System.String)">
            <summary>
            Opens a file, appends the specified string to the file, and then closes the file. If the file does not exist, this method creates a file, writes the specified string to the file, then closes the file.
            </summary>
            <exception cref="T:System.Security.SecurityException"></exception>
        </member>
        <member name="M:Obsidian.API.Plugins.Services.IFileWriter.AppendTextAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously opens a file or creates a file if it does not already exist, appends the specified string to the file, and then closes the file.
            </summary>
            <exception cref="T:System.Security.SecurityException"></exception>
        </member>
        <member name="M:Obsidian.API.Plugins.Services.IFileWriter.CreateFile(System.String)">
            <summary>
            Creates or overwrites a file in the specified path.
            </summary>
            <exception cref="T:System.Security.SecurityException"></exception>
        </member>
        <member name="M:Obsidian.API.Plugins.Services.IFileWriter.CopyFile(System.String,System.String)">
            <summary>
            Copies an existing file to a new file. Overwriting a file of the same name is allowed.
            </summary>
            <exception cref="T:System.Security.SecurityException"></exception>
        </member>
        <member name="M:Obsidian.API.Plugins.Services.IFileWriter.MoveFile(System.String,System.String)">
            <summary>
            Moves a specified file to a new location, providing the option to specify a new file name.
            </summary>
            <exception cref="T:System.Security.SecurityException"></exception>
        </member>
        <member name="M:Obsidian.API.Plugins.Services.IFileWriter.DeleteFile(System.String)">
            <summary>
            Deletes the specified file.
            </summary>
            <exception cref="T:System.Security.SecurityException"></exception>
        </member>
        <member name="M:Obsidian.API.Plugins.Services.IFileWriter.CreateDirectory(System.String)">
            <summary>
            Creates all directories and subdirectories in the specified path unless they already exist.
            </summary>
            <exception cref="T:System.Security.SecurityException"></exception>
        </member>
        <member name="M:Obsidian.API.Plugins.Services.IFileWriter.DeleteDirectory(System.String)">
            <summary>
            Deletes the specified directory and, if indicated, any subdirectories and files in the directory.
            </summary>
            <exception cref="T:System.Security.SecurityException"></exception>
        </member>
        <member name="T:Obsidian.API.Plugins.Services.ILogger">
            <summary>
            Represents a service used to perform logging.
            </summary>
        </member>
        <member name="M:Obsidian.API.Plugins.Services.ILogger.Log(System.String)">
            <summary>
            Formats and writes an informational log message.
            </summary>
        </member>
        <member name="M:Obsidian.API.Plugins.Services.ILogger.LogDebug(System.String)">
            <summary>
            Formats and writes a debug log message.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Obsidian.API.Plugins.Services.ILogger.LogWarning(System.String)">
            <summary>
            Formats and writes a warning log message.
            </summary>
        </member>
        <member name="M:Obsidian.API.Plugins.Services.ILogger.LogError(System.String)">
            <summary>
            Formats and writes an error log message.
            </summary>
        </member>
        <member name="M:Obsidian.API.Plugins.Services.ILogger.LogError``1(``0)">
            <summary>
            Formats and writes an error log message.
            </summary>
        </member>
        <member name="M:Obsidian.API.Plugins.Services.ILogger.LogTrace(System.String)">
            <summary>
            Formats and writes a trace log message.
            </summary>
        </member>
        <member name="M:Obsidian.API.Plugins.Services.ILogger.LogTrace``1(``0)">
            <summary>
            Formats and writes a trace log message.
            </summary>
        </member>
        <member name="T:Obsidian.API.Plugins.Services.INativeLoader">
            <summary>
            Represents a service used for loading and using native libraries.
            </summary>
        </member>
        <member name="M:Obsidian.API.Plugins.Services.INativeLoader.LoadMethod``1(System.String)">
            <summary>
            Attempts to load exported function from native library.
            </summary>
            <exception cref="T:System.Security.SecurityException"></exception>
        </member>
        <member name="M:Obsidian.API.Plugins.Services.INativeLoader.LoadMethod``1(System.String,System.Text.Encoding)">
            <summary>
            Attempts to load exported function with specific string encoding from native library.
            </summary>
            <exception cref="T:System.Security.SecurityException"></exception>
        </member>
        <member name="M:Obsidian.API.Plugins.Services.INativeLoader.LoadMethod``1(System.String,System.String)">
            <summary>
            Attempts to load exported function from native library.
            </summary>
            <exception cref="T:System.Security.SecurityException"></exception>
        </member>
        <member name="M:Obsidian.API.Plugins.Services.INativeLoader.LoadMethod``1(System.String,System.String,System.Text.Encoding)">
            <summary>
            Attempts to load exported function with specific encoding from native library.
            </summary>
            <exception cref="T:System.Security.SecurityException"></exception>
        </member>
        <member name="T:Obsidian.API.Plugins.Services.INetworkClient">
            <summary>
            Represents a service used for performing actions over network.
            </summary>
        </member>
        <member name="T:Obsidian.API.Plugins.Services.IO.IFileService">
            <summary>
            Provides the base interface for file services.
            </summary>
        </member>
        <member name="M:Obsidian.API.Plugins.Services.IO.IFileService.FileExists(System.String)">
            <summary>
            Determines whether the specified file exists.
            </summary>
            <exception cref="T:System.Security.SecurityException"></exception>
        </member>
        <member name="M:Obsidian.API.Plugins.Services.IO.IFileService.DirectoryExists(System.String)">
            <summary>
            Determines whether the given path refers to an existing directory on disk.
            </summary>
            <exception cref="T:System.Security.SecurityException"></exception>
        </member>
        <member name="M:Obsidian.API.Plugins.Services.IO.IFileService.CombinePath(System.String[])">
            <summary>
            Combines an array of strings into a path.
            </summary>
        </member>
        <member name="M:Obsidian.API.Plugins.Services.IO.IFileService.GetExtension(System.String)">
            <summary>
            Returns the extension (including the period ".") of the specified path string.
            </summary>
        </member>
        <member name="M:Obsidian.API.Plugins.Services.IO.IFileService.GetFileName(System.String)">
            <summary>
            Returns the file name and extension of the specified path string.
            </summary>
        </member>
        <member name="M:Obsidian.API.Plugins.Services.IO.IFileService.GetFileNameWithoutExtension(System.String)">
            <summary>
            Returns the file name of the specified path string without the extension.
            </summary>
        </member>
        <member name="M:Obsidian.API.Plugins.Services.IO.IFileService.GetFullPath(System.String)">
            <summary>
            Returns the absolute path for the specified path string.
            </summary>
        </member>
        <member name="M:Obsidian.API.Plugins.Services.IO.IFileService.CreateWorkingDirectory(System.Boolean,System.Boolean)">
            <summary>
            Creates a directory, that is used by default for relative paths.
            </summary>
            <param name="createOwnDirectory">If set to <b><c>false</c></b>, the automatically assigned directory for your plugin will be skipped.</param>
            <param name="skipFolderAutoGeneration">If set to <b><c>true</c></b>, skips the auto generation method for default plugin dir. Also, <b><c>createOwnDirectory</c></b> needs to be <b><c>true</c></b> for this to work.</param>
            <returns>Path to the created directory.</returns>
        </member>
        <member name="M:Obsidian.API.Plugins.Services.IO.IFileService.GetWorkingDirectory">
            <summary>
            Returns with the working directory.
            </summary>
            <returns>Path to the created directory.</returns>
        </member>
        <member name="T:Obsidian.API.Plugins.Services.IO.IStream">
            <summary>
            Provides a generic view of a sequence of bytes.
            </summary>
        </member>
        <member name="P:Obsidian.API.Plugins.Services.IO.IStream.CanRead">
            <summary>
            Gets a value that indicates whether the current stream supports reading.
            </summary>
        </member>
        <member name="P:Obsidian.API.Plugins.Services.IO.IStream.CanWrite">
            <summary>
            Gets a value that indicates whether the current stream supports writing.
            </summary>
        </member>
        <member name="P:Obsidian.API.Plugins.Services.IO.IStream.Name">
            <summary>
            Gets the absolute path of the data opened in the <see cref="T:Obsidian.API.Plugins.Services.IO.IStream"/>.
            </summary>
        </member>
        <member name="M:Obsidian.API.Plugins.Services.IO.IStream.Close">
            <summary>
            Closes the current stream and releases any resources (such as sockets and file handles) associated with the current stream.
            Instead of calling this method, ensure that the stream is properly disposed.
            </summary>
        </member>
        <member name="M:Obsidian.API.Plugins.Services.IO.IStream.CopyTo(Obsidian.API.Plugins.Services.IO.IStream)">
            <summary>
            Reads the bytes from the current stream and writes them to another stream.
            </summary>
        </member>
        <member name="M:Obsidian.API.Plugins.Services.IO.IStream.CopyToAsync(Obsidian.API.Plugins.Services.IO.IStream)">
            <summary>
            Asynchronously reads the bytes from the current stream and writes them to another stream.
            </summary>
        </member>
        <member name="M:Obsidian.API.Plugins.Services.IO.IStream.Flush">
            <summary>
            Clears buffers for this stream and causes any buffered data to be written.
            </summary>
        </member>
        <member name="M:Obsidian.API.Plugins.Services.IO.IStream.FlushAsync">
            <summary>
            Asynchronously clears all buffers for this stream and causes any buffered data to be written to the underlying device.
            </summary>
        </member>
        <member name="M:Obsidian.API.Plugins.Services.IO.IStream.ReadByte">
            <summary>
            Reads a byte from the stream and advances the read position one byte.
            </summary>
        </member>
        <member name="M:Obsidian.API.Plugins.Services.IO.IStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a block of bytes from the stream and writes the data in a given buffer.
            </summary>
        </member>
        <member name="M:Obsidian.API.Plugins.Services.IO.IStream.ReadAsync(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Asynchronously reads a sequence of bytes from the current stream and writes the data in a given buffer.
            </summary>
        </member>
        <member name="M:Obsidian.API.Plugins.Services.IO.IStream.ReadLine">
            <summary>
            Reads a line of characters from the current stream and returns the data as a string.
            </summary>
        </member>
        <member name="M:Obsidian.API.Plugins.Services.IO.IStream.ReadLineAsync">
            <summary>
            Reads a line of characters asynchronously from the current stream and returns the data as a string.
            </summary>
        </member>
        <member name="M:Obsidian.API.Plugins.Services.IO.IStream.ReadToEnd">
            <summary>
            Reads all characters from the current position to the end of the stream.
            </summary>
        </member>
        <member name="M:Obsidian.API.Plugins.Services.IO.IStream.ReadToEndAsync">
            <summary>
            Reads all characters from the current position to the end of the stream asynchronously and returns them as one string.
            </summary>
        </member>
        <member name="M:Obsidian.API.Plugins.Services.IO.IStream.WriteByte(System.Byte)">
            <summary>
            Writes a byte to the current position in the stream.
            </summary>
        </member>
        <member name="M:Obsidian.API.Plugins.Services.IO.IStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a block of bytes to the stream.
            </summary>
        </member>
        <member name="M:Obsidian.API.Plugins.Services.IO.IStream.WriteAsync(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Asynchronously writes a sequence of bytes to the current stream and advances the current position.
            </summary>
        </member>
        <member name="M:Obsidian.API.Plugins.Services.IO.IStream.Write(System.String)">
            <summary>
            Writes a string to the stream.
            </summary>
        </member>
        <member name="M:Obsidian.API.Plugins.Services.IO.IStream.WriteAsync(System.String)">
            <summary>
            Asynchronously writes a string to the stream.
            </summary>
        </member>
        <member name="M:Obsidian.API.Plugins.Services.IO.IStream.Write(System.Object)">
            <summary>
            Writes the text representation of an object to the stream.
            </summary>
        </member>
        <member name="M:Obsidian.API.Plugins.Services.IO.IStream.WriteAsync(System.Object)">
            <summary>
            Asynchronously writes the text representation of an object to the stream.
            </summary>
        </member>
        <member name="M:Obsidian.API.Plugins.Services.IO.IStream.WriteLine(System.String)">
            <summary>
            Writes a string to the stream, followed by a line terminator.
            </summary>
        </member>
        <member name="M:Obsidian.API.Plugins.Services.IO.IStream.WriteLineAsync(System.String)">
            <summary>
            Asynchronously writes a string to the stream, followed by a line terminator.
            </summary>
        </member>
        <member name="M:Obsidian.API.Plugins.Services.IO.IStream.WriteLine(System.Object)">
            <summary>
            Writes the text representation of an object to the stream, followed by a line terminator.
            </summary>
        </member>
        <member name="M:Obsidian.API.Plugins.Services.IO.IStream.WriteLineAsync(System.Object)">
            <summary>
            Asynchronously writes the text representation of an object to the stream, followed by a line terminator.
            </summary>
        </member>
        <member name="F:Obsidian.API.BlockFace.Bottom">
            <summary>
            -Y
            </summary>
        </member>
        <member name="F:Obsidian.API.BlockFace.Top">
            <summary>
            +Y
            </summary>
        </member>
        <member name="F:Obsidian.API.BlockFace.North">
            <summary>
            -Z
            </summary>
        </member>
        <member name="F:Obsidian.API.BlockFace.South">
            <summary>
            +Z
            </summary>
        </member>
        <member name="F:Obsidian.API.BlockFace.West">
            <summary>
            -X
            </summary>
        </member>
        <member name="F:Obsidian.API.BlockFace.East">
            <summary>
            +X
            </summary>
        </member>
        <member name="F:Obsidian.API.EClickAction.OpenUrl">
            <summary>
            Opens the given URL in the default web browser. Ignored if the player has opted to disable links in chat;
            may open a GUI prompting the user if the setting for that is enabled. The link's protocol must be set and must be http or https, for security reasons.
            </summary>
        </member>
        <member name="F:Obsidian.API.EClickAction.CopyToClipboard">
            <summary>
            Copies Value to the clipboard.
            </summary>
        </member>
        <member name="F:Obsidian.API.EClickAction.RunCommand">
            <summary>
            Runs the given command. Not required to be a command - clicking this only causes the client to send the given content as a chat message, so if not prefixed with /, they will say the given text instead.
            If used in a book GUI, the GUI is closed after clicking
            </summary>
        </member>
        <member name="F:Obsidian.API.EClickAction.SuggestCommand">
            <summary>
            Only usable for messages in chat. Replaces the content of the chat box with the given text - usually a command, but it is not required to be a command (commands should be prefixed with /).
            </summary>
        </member>
        <member name="F:Obsidian.API.EClickAction.ChangePage">
            <summary>
            Only usable within written books. Changes the page of the book to the given page, starting at 1. For instance, "value":1 switches the book to the first page.
            If the page is less than one or beyond the number of pages in the book, the event is ignored.
            </summary>
        </member>
        <member name="F:Obsidian.API.EHoverAction.ShowText">
            <summary>
            Shows a raw JSON text component.
            </summary>
        </member>
        <member name="F:Obsidian.API.EHoverAction.ShowItem">
            <summary>
            Shows the tooltip of an item as if it was being hovering over it in an inventory.
            </summary>
        </member>
        <member name="F:Obsidian.API.EHoverAction.ShowEntity">
            <summary>
            Shows an entity's name, type, and UUID. 
            </summary>
        </member>
        <member name="T:Obsidian.API.SoundCategory">
            <summary>
            https://gist.github.com/konwboj/7c0c380d3923443e9d55
            </summary>
        </member>
        <member name="P:Obsidian.API.IConfig.Motd">
            <summary>
            Server description.
            </summary>
        </member>
        <member name="P:Obsidian.API.IConfig.Port">
            <summary>
            The port on which to listen for incoming connection attempts.
            </summary>
        </member>
        <member name="P:Obsidian.API.IConfig.Generator">
            <summary>
            Name of the world generator to be used.
            </summary>
        </member>
        <member name="P:Obsidian.API.IConfig.Seed">
            <summary>
            Seed supplied to the world generator.
            </summary>
        </member>
        <member name="P:Obsidian.API.IConfig.JoinMessage">
            <summary>
            Message, that is sent to the chat when player successfully joins the server.
            </summary>
        </member>
        <member name="P:Obsidian.API.IConfig.LeaveMessage">
            <summary>
            Message, that is sent to the chat when player leaves the server.
            </summary>
        </member>
        <member name="P:Obsidian.API.IConfig.OnlineMode">
            <summary>
            Whether the server uses MojangAPI for loading skins etc.
            </summary>
        </member>
        <member name="P:Obsidian.API.IConfig.MaxPlayers">
            <summary>
            Maximum amount of players that is allowed to be connected at the same time.
            </summary>
        </member>
        <member name="P:Obsidian.API.IConfig.MulitplayerDebugMode">
            <summary>
            Whether each login/client gets a random username where multiple connections from the same host will be allowed.
            </summary>
        </member>
        <member name="P:Obsidian.API.IConfig.Header">
            <summary>
            Upper text in the in-game TAB menu.
            </summary>
        </member>
        <member name="P:Obsidian.API.IConfig.Footer">
            <summary>
            Lower text in the in-game TAB menu.
            </summary>
        </member>
        <member name="P:Obsidian.API.IConfig.MaxMissedKeepAlives">
            <summary>
            How many KeepAlive packets can be ignored by the client before disconnecting.
            </summary>
        </member>
        <member name="P:Obsidian.API.IConfig.DownloadPlugins">
            <summary>
            Paths of plugins that are loaded at the starttime.
            </summary>
        </member>
        <member name="P:Obsidian.API.IServerStatus.Favicon">
            <summary>
            This is a base64 png image, that has dimensions of 64x64
            </summary>
        </member>
        <member name="T:Obsidian.API.Angle">
            <summary>
            A class that represents an angle from 0° to 360° degrees.
            </summary>
        </member>
        <member name="T:Obsidian.API.Position">
            <summary>
            Represents position in three-dimensional space. Uses <see cref="T:System.Int32"/>.
            </summary>
        </member>
        <member name="P:Obsidian.API.Position.X">
            <summary>
            X component of the <see cref="T:Obsidian.API.Position"/>.
            </summary>
        </member>
        <member name="P:Obsidian.API.Position.Y">
            <summary>
            Y component of the <see cref="T:Obsidian.API.Position"/>.
            </summary>
        </member>
        <member name="P:Obsidian.API.Position.Z">
            <summary>
            Z component of the <see cref="T:Obsidian.API.Position"/>.
            </summary>
        </member>
        <member name="M:Obsidian.API.Position.#ctor(System.Int32)">
            <summary>
            Creates new instance of <see cref="T:Obsidian.API.Position"/> with <see cref="P:Obsidian.API.Position.X"/>, <see cref="P:Obsidian.API.Position.Y"/> and <see cref="P:Obsidian.API.Position.Z"/> set to <paramref name="value"/>.
            </summary>
            <param name="value">Value of <see cref="P:Obsidian.API.Position.X"/>, <see cref="P:Obsidian.API.Position.Y"/> and <see cref="P:Obsidian.API.Position.Z"/>.</param>
        </member>
        <member name="M:Obsidian.API.Position.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new instance of <see cref="T:Obsidian.API.Position"/> with specific values.
            </summary>
            <param name="x">Value of X coordinate.</param>
            <param name="y">Value of Y coordinate.</param>
            <param name="z">Value of Z coordinate.</param>
        </member>
        <member name="M:Obsidian.API.Position.ToString">
            <summary>
            Returns <see cref="T:Obsidian.API.Position"/> formatted as a <see cref="T:System.String"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Obsidian.API.Position.Magnitude">
            <summary>
            Calculates distance of this <see cref="T:Obsidian.API.Position"/> from <see cref="F:Obsidian.API.Position.Zero"/>.
            </summary>
        </member>
        <member name="M:Obsidian.API.Position.Equals(Obsidian.API.Position)">
            <summary>
            Indicates whether this <see cref="T:Obsidian.API.Position"/> is near equal to <paramref name="other"/>.
            </summary>
        </member>
        <member name="M:Obsidian.API.Position.Clamp(Obsidian.API.Position,Obsidian.API.Position)">
            <summary>
            Returns <see cref="T:Obsidian.API.Position"/> clamped to the inclusive range of <paramref name="min"/> and <paramref name="max"/>.
            </summary>
        </member>
        <member name="M:Obsidian.API.Position.ChunkClamp">
            <summary>
            Returns <see cref="T:Obsidian.API.Position"/> clamped to fit inside a single minecraft chunk.
            </summary>
        </member>
        <member name="M:Obsidian.API.Position.DistanceTo(Obsidian.API.Position,Obsidian.API.Position)">
            <summary>
            Calculates the distance between two <see cref="T:Obsidian.API.Position"/> objects.
            </summary>
        </member>
        <member name="M:Obsidian.API.Position.Square(System.Int32)">
            <summary>
            Calculates the square of a <paramref name="number"/>.
            </summary>
        </member>
        <member name="T:Obsidian.API.PositionF">
            <summary>
            Represents position in three-dimensional space. Uses <see cref="T:System.Single"/>.
            </summary>
        </member>
        <member name="P:Obsidian.API.PositionF.X">
            <summary>
            X component of the <see cref="T:Obsidian.API.PositionF"/>.
            </summary>
        </member>
        <member name="P:Obsidian.API.PositionF.Y">
            <summary>
            Y component of the <see cref="T:Obsidian.API.PositionF"/>.
            </summary>
        </member>
        <member name="P:Obsidian.API.PositionF.Z">
            <summary>
            Z component of the <see cref="T:Obsidian.API.PositionF"/>.
            </summary>
        </member>
        <member name="M:Obsidian.API.PositionF.#ctor(System.Single)">
            <summary>
            Creates new instance of <see cref="T:Obsidian.API.PositionF"/> with <see cref="P:Obsidian.API.PositionF.X"/>, <see cref="P:Obsidian.API.PositionF.Y"/> and <see cref="P:Obsidian.API.PositionF.Z"/> set to <paramref name="value"/>.
            </summary>
            <param name="value">Value of <see cref="P:Obsidian.API.PositionF.X"/>, <see cref="P:Obsidian.API.PositionF.Y"/> and <see cref="P:Obsidian.API.PositionF.Z"/>.</param>
        </member>
        <member name="M:Obsidian.API.PositionF.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new instance of <see cref="T:Obsidian.API.PositionF"/> with specific values.
            </summary>
            <param name="x">Value of X coordinate.</param>
            <param name="y">Value of Y coordinate.</param>
            <param name="z">Value of Z coordinate.</param>
        </member>
        <member name="M:Obsidian.API.PositionF.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Creates a new instance of <see cref="T:Obsidian.API.PositionF"/> with specific values.
            </summary>
            <param name="x">Value of X coordinate.</param>
            <param name="y">Value of Y coordinate.</param>
            <param name="z">Value of Z coordinate.</param>
        </member>
        <member name="M:Obsidian.API.PositionF.ToString">
            <summary>
            Returns <see cref="T:Obsidian.API.PositionF"/> formatted as a <see cref="T:System.String"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Obsidian.API.PositionF.Magnitude">
            <summary>
            Calculates distance of this <see cref="T:Obsidian.API.PositionF"/> from <see cref="F:Obsidian.API.PositionF.Zero"/>.
            </summary>
        </member>
        <member name="M:Obsidian.API.PositionF.Equals(Obsidian.API.PositionF)">
            <summary>
            Indicates whether this <see cref="T:Obsidian.API.PositionF"/> is near equal to <paramref name="other"/>.
            </summary>
        </member>
        <member name="M:Obsidian.API.PositionF.Floor">
            <summary>
            Truncates the decimal component of each part of this <see cref="T:Obsidian.API.PositionF"/>.
            </summary>
        </member>
        <member name="M:Obsidian.API.PositionF.Normalize">
            <summary>
            Performs vector normalization on this <see cref="T:Obsidian.API.PositionF"/>'s coordinates.
            </summary>
            <returns>Normalized <see cref="T:Obsidian.API.PositionF"/>.</returns>
        </member>
        <member name="M:Obsidian.API.PositionF.Clamp(Obsidian.API.PositionF,Obsidian.API.PositionF)">
            <summary>
            Returns <see cref="T:Obsidian.API.PositionF"/> clamped to the inclusive range of <paramref name="min"/> and <paramref name="max"/>.
            </summary>
        </member>
        <member name="M:Obsidian.API.PositionF.ChunkClamp">
            <summary>
            Returns <see cref="T:Obsidian.API.PositionF"/> clamped to fit inside a single minecraft chunk.
            </summary>
        </member>
        <member name="M:Obsidian.API.PositionF.DistanceTo(Obsidian.API.PositionF,Obsidian.API.PositionF)">
            <summary>
            Calculates the distance between two <see cref="T:Obsidian.API.PositionF"/> objects.
            </summary>
        </member>
        <member name="M:Obsidian.API.PositionF.Square(System.Single)">
            <summary>
            Calculates the square of a <paramref name="number"/>.
            </summary>
        </member>
        <member name="T:Obsidian.API.Velocity">
            <summary>
            Represents velocity of an entity in the world.
            </summary>
        </member>
        <member name="P:Obsidian.API.Velocity.X">
            <summary>
            Velocity on the X axis.
            </summary>
        </member>
        <member name="P:Obsidian.API.Velocity.Y">
            <summary>
            Velocity on the Y axis.
            </summary>
        </member>
        <member name="P:Obsidian.API.Velocity.Z">
            <summary>
            Velocity on the Z axis.
            </summary>
        </member>
        <member name="P:Obsidian.API.Velocity.Magnitude">
            <summary>
            Returns the length of this <see cref="T:Obsidian.API.Velocity"/>.
            </summary>
        </member>
        <member name="M:Obsidian.API.Velocity.#ctor(System.Int16,System.Int16,System.Int16)">
            <summary>
            Creates a new instance of <see cref="T:Obsidian.API.Velocity"/> with specific values.
            </summary>
            <param name="x">Velocity on the X axis.</param>
            <param name="y">Velocity on the Y axis.</param>
            <param name="z">Velocity on the Z axis.</param>
        </member>
        <member name="M:Obsidian.API.Velocity.FromBlockPerSecond(System.Single,System.Single,System.Single)">
            <summary>
            Returns <see cref="T:Obsidian.API.Velocity"/> expressed as how many blocks on each axis can be travelled in a second.
            </summary>
            <param name="x">How many blocks can be travelled on the X axis in a second.</param>
            <param name="y">How many blocks can be travelled on the Y axis in a second.</param>
            <param name="z">How many blocks can be travelled on the Z axis in a second.</param>
        </member>
        <member name="M:Obsidian.API.Velocity.FromBlockPerTick(System.Single,System.Single,System.Single)">
            <summary>
            Returns <see cref="T:Obsidian.API.Velocity"/> expressed as how many blocks on each axis can be travelled in a tick (50ms).
            </summary>
            <param name="x">How many blocks can be travelled on the X axis in a tick (50ms).</param>
            <param name="y">How many blocks can be travelled on the Y axis in a tick (50ms).</param>
            <param name="z">How many blocks can be travelled on the Z axis in a tick (50ms).</param>
        </member>
        <member name="M:Obsidian.API.Velocity.FromPosition(Obsidian.API.Position)">
            <summary>
            Turns <see cref="T:Obsidian.API.Position"/> into <see cref="T:Obsidian.API.Velocity"/>, using it's coordinates as to how many blocks can be travelled per second.
            </summary>
            <param name="position"><see cref="T:Obsidian.API.Position"/> to be used for conversion.</param>
        </member>
        <member name="M:Obsidian.API.Velocity.FromPosition(Obsidian.API.PositionF)">
            <summary>
            Turns <see cref="T:Obsidian.API.PositionF"/> into <see cref="T:Obsidian.API.Velocity"/>, using it's coordinates as to how many blocks can be travelled per second.
            </summary>
            <param name="position"><see cref="T:Obsidian.API.PositionF"/> to be used for conversion.</param>
        </member>
        <member name="M:Obsidian.API.Velocity.FromDirection(Obsidian.API.Position,Obsidian.API.Position)">
            <summary>
            Returns such velocity, that can travel from <paramref name="from"/> to <paramref name="to"/> in a second.
            </summary>
            <param name="from">Starting position.</param>
            <param name="to">Target position.</param>
        </member>
        <member name="M:Obsidian.API.Velocity.FromDirection(Obsidian.API.PositionF,Obsidian.API.PositionF)">
            <summary>
            Returns such velocity, that can travel from <paramref name="from"/> to <paramref name="to"/> in a second.
            </summary>
            <param name="from">Starting position.</param>
            <param name="to">Target position.</param>
        </member>
    </members>
</doc>
